#%%
import spacy
from sentence_transformers import SentenceTransformer, util
# 1Ô∏è‚É£ Carregar o spaCy para pr√©-processamento
nlp = spacy.load("pt_core_news_lg")


# %%
# 2Ô∏è‚É£ Carregar o modelo sem√¢ntico
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# 3Ô∏è‚É£ Dicion√°rio FAQ
faq = {
    "minha m√°quina de lavar n√£o est√° ligando": "Verifique se o cabo de energia est√° bem conectado e se h√° energia na tomada. Se o problema persistir, entre em contato com a assist√™ncia t√©cnica.",
    "a m√°quina de lavar est√° fazendo barulho": "Certifique-se de que n√£o h√° moedas, bot√µes ou objetos soltos no tambor. Barulhos fortes tamb√©m podem indicar desequil√≠brio na carga.",
    "como limpar o filtro da m√°quina de lavar": "Desligue a m√°quina da tomada, abra a tampa inferior e retire o filtro girando-o no sentido anti-hor√°rio. Lave com √°gua corrente e recoloque.",
    "a roupa sai muito molhada da m√°quina": "Verifique se o ciclo de centrifuga√ß√£o est√° selecionado corretamente. Cargas muito grandes ou mal distribu√≠das podem afetar o desempenho.",
    "como fa√ßo para usar o modo econ√¥mico da m√°quina": "Selecione o ciclo ‚ÄòEcon√¥mico‚Äô ou ‚ÄòR√°pido‚Äô no painel e use a quantidade de sab√£o indicada no manual. Isso economiza √°gua e energia.",
    "a m√°quina est√° com mau cheiro": "Recomenda-se fazer uma lavagem com o tambor vazio, utilizando vinagre branco ou produtos espec√≠ficos para limpeza de m√°quinas.",
    "meu fog√£o n√£o est√° acendendo": "Verifique se o g√°s est√° aberto e se o acendimento autom√°tico est√° funcionando. Caso use f√≥sforo, veja se o queimador n√£o est√° entupido.",
    "a chama do fog√£o est√° amarela": "Isso pode indicar sujeira ou pouca entrada de oxig√™nio. Retire o queimador e limpe-o com cuidado.",
    "como limpar o forno do fog√£o": "Use um pano √∫mido com detergente neutro. Evite produtos abrasivos. Para sujeiras pesadas, use vinagre morno e bicarbonato.",
    "meu forno n√£o aquece direito": "Verifique se o seletor de temperatura est√° funcionando e se o acendimento est√° completo. Caso o problema continue, pode ser falha no termostato.",
    "como saber o tamanho do botij√£o ideal": "Verifique o manual do seu modelo. A maioria dos fog√µes dom√©sticos utiliza botij√µes de 13 kg com v√°lvula padr√£o.",
    "quanto tempo dura o acendimento autom√°tico": "Depende do modelo, mas em m√©dia o acendimento deve ocorrer em at√© 3 segundos ap√≥s pressionar o bot√£o."
}

# 4Ô∏è‚É£ Fun√ß√£o pra limpar e normalizar o texto
def preprocessar(texto):
    doc = nlp(texto.lower())
    tokens_validos = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]
    return " ".join(tokens_validos)

# 5Ô∏è‚É£ Pr√©-processar todas as perguntas do FAQ
faq_list = list(faq.keys())
faq_processadas = [preprocessar(pergunta) for pergunta in faq_list]
# %%
# 6Ô∏è‚É£ Gerar embeddings (s√≥ precisa fazer uma vez)
faq_embeddings = model.encode(faq_processadas, convert_to_tensor=True)

# 7Ô∏è‚É£ Entrada do usu√°rio
usuario_input = input("Digite sua d√∫vida: ")
usuario_limpo = preprocessar(usuario_input)
usuario_embedding = model.encode(usuario_limpo, convert_to_tensor=True)


# %%
# 8Ô∏è‚É£ Calcular similaridade
similaridades = util.cos_sim(usuario_embedding, faq_embeddings)[0]
indice = similaridades.argmax().item()
melhor_pergunta = faq_list[indice]
melhor_resposta = faq[melhor_pergunta]
pontuacao = similaridades[indice].item()

# 9Ô∏è‚É£ Exibir resultado
print("\nMelhor correspond√™ncia:")
print(f"Pergunta: {melhor_pergunta}")
print(f"Similaridade: {pontuacao*100:.2f}%")
print(f"Resposta: {melhor_resposta}")

#  üîü Opcional: verifica√ß√£o de confian√ßa
if pontuacao < 0.6:
    print("\n‚ö†Ô∏è N√£o encontrei uma resposta exata para sua pergunta.")